# aiogram 3.x
from aiogram import Router, F, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from get_students.get_stdnts import Form

photo_router  = Router()

# ----- FSM -----


# ----- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã -----
MONTHS = [
    "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å",
    "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç",
    "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
]

BTN_DONE     = "‚úÖ –ì–æ—Ç–æ–≤–æ"
BTN_CLEAR    = "üóë –û—á–∏—Å—Ç–∏—Ç—å"
BTN_CANCEL   = "‚ùå –û—Ç–º–µ–Ω–∞"
CANCEL_ALIASES = {"‚ùå –æ—Ç–º–µ–Ω–∞", "–æ—Ç–º–µ–Ω–∞"}

VARIATION_SELECTOR = "\ufe0f"

def norm(s: str) -> str:
    # —É–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ø–æ–Ω–∏–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä
    return (s or "").replace(VARIATION_SELECTOR, "").strip().casefold()

# ----- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ -----
def months_reply_kb() -> ReplyKeyboardMarkup:
    # –°–¥–µ–ª–∞–µ–º –ø–æ 3 –º–µ—Å—è—Ü–∞ –≤ —Å—Ç—Ä–æ–∫–µ
    rows = []
    row = []
    for i, m in enumerate(MONTHS, start=1):
        row.append(KeyboardButton(text=m))
        if i % 3 == 0:
            rows.append(row)
            row = []
    if row:
        rows.append(row)

    # —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    rows.append([KeyboardButton(text=BTN_DONE)])
    rows.append([KeyboardButton(text=BTN_CLEAR), KeyboardButton(text=BTN_CANCEL)])

    return ReplyKeyboardMarkup(
        keyboard=rows,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–∏—Ä–∞–π—Ç–µ –º–µ—Å—è—Ü(—ã) –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª"
    )

# ----- –°—Ç–∞—Ä—Ç –≤—ã–±–æ—Ä–∞ -----

@photo_router.message(Form.waiting_for_child)  # –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start_months(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    name = message.text
    await state.update_data(selected=[])
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü(—ã) –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ù–∞–∂–∏–º–∞–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=months_reply_kb()
    )

    await state.set_state(Form.waiting_for_month)

# ----- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ -----


@photo_router.message(F.text.func(lambda t: norm(t) in CANCEL_ALIASES))
async def cancel_anywhere(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    await state.clear()

@photo_router.message(Form.waiting_for_month)
async def handle_choice(message: types.Message, state: FSMContext):
    text = (message.text or "").strip()

    # –æ—Ç–º–µ–Ω–∞
    if text == BTN_CANCEL:
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return

    # –æ—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä
    if text == BTN_CLEAR:
        await state.update_data(selected=[])
        await message.answer("–°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω. –í—ã–±–∏—Ä–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    # –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä
    if text == BTN_DONE:
        data = await state.get_data()
        selected = data.get("selected", [])
        if not selected:
            await message.answer("‚ùó –ù—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–µ—Å—è—Ü.")
            return
        # –ù–ï –æ—á–∏—â–∞–µ–º state –∑–¥–µ—Å—å ‚Äî —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã (—Ñ–æ—Ç–æ/PDF) –º–æ–≥–ª–∏ –≤–∑—è—Ç—å –º–µ—Å—è—Ü—ã
        await message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {', '.join(selected)}.\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ PDF —Å –æ–ø–ª–∞—Ç–æ–π üìé",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Form.waiting_for_photo)
        return

    # –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ (—Ç–æ–≥–≥–ª)
    if text in MONTHS:
        data = await state.get_data()
        selected = data.get("selected", [])

        if text in selected:
            selected.remove(text)
            msg = f"–£–¥–∞–ª–∏–ª ¬´{text}¬ª –∏–∑ —Å–ø–∏—Å–∫–∞."
        else:
            selected.append(text)
            msg = f"–î–æ–±–∞–≤–∏–ª ¬´{text}¬ª."

        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø–æ MONTHS
        selected_sorted = [m for m in MONTHS if m in selected]
        await state.update_data(selected=selected_sorted)

        pretty = ", ".join(selected_sorted) if selected_sorted else "–ø–æ–∫–∞ –ø—É—Å—Ç–æ"
        await message.answer(f"{msg}\n–¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä: {pretty}\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´{BTN_DONE}¬ª.")
        return

    # –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü(—ã) —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª.")
